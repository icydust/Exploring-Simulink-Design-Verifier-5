% This script is used to create unique mutants for a given stateflow model.
% Requirements:
%   1. All variables in the transitions must begin with an alphabet followed
%   by any alphabet, number or underscore. 
%   2. All comparisons are case sensitive. 
%
% The script generates 4 types of mutants:
%   1. Change in variable : Any variable in a randomly selected transition is
%   replaced with another legit variable from the stateflow transitions.
%   2. Change in operation: Arithmetic (+ - / *), Logical (& |) and Relational
%   operators (> <) are identified and altered to generate mutants.
%   3. Variable negation: Mutants with ~(variable) are generated for a
%   randomly selected transition.
%   4. Change in execution order: All transitions have an execution order
%   that determines which transitions have priority over the others. Mutants
%   are generated by changing the execution order of a randomly selected
%   transition.
%
% All mutant transitions can be identified by comments against them that
% indicate the original transition as well. This available in the
% report.txt file also.
%
% This file has been used to generate 650 odd mutants for a Autopilot
% Vertical Mode. SLDV batch runs have found all errors.

% Copyright (c) Natasha.Jeppu@gmail.com
% http://www.mathworks.com/matlabcentral/profile/authors/5987424-natasha-jeppu

clear all
fid = fopen('report.txt','w');
mutant_set = [];    % This is the final set of mutants

bdclose all    % start clean
open('autopilot_stateflow_sldv_P05_org')    % specify stateflow model orginal

s =sfroot;
n=findDeep(s,'Transition');      % Search for all transitions
EX=zeros(length(n),1);           % This looks at execution order of the transition
for i = 1:length(n)
    %     n(i).labelString;          % Used for a check. This displays the text
                                     % attached with each transition
    if n(i).executionOrder > 1
        EX(i) = n(i).executionOrder;
    end
end

var = [];
reg = [];

for i = 1:length(n)
    n(i).labelString = regexprep(n(i).labelString,'[%].*',''); %removing comments
    temp = regexprep(n(i).labelString,'[0-9]+[.]*[0-9]*e[+][0-9]*','');
    str = regexp(temp,'[a-zA-Z][a-zA-Z_0-9]*','match'); %extract all variables
    var = union(var,str);
end
%%
temp = [];
for mutant_type = 1:3 % 1 for variables, 2 for operations, 3 variable negation
    for iloop = 1:1000    % random 1000 mutants
        
        switch(mutant_type)
            case 1
                %% change variables
                r_transition = randi([1 length(n)],1,1);
                temp = regexprep(n(r_transition).labelString,'[0-9]+[.]*[0-9]*e[+][0-9]*','');
                get_var = regexp(temp,'[a-zA-Z][a-zA-Z_0-9]*','match');
                while(isempty(get_var))
                    r_transition = randi([1 length(n)],1,1);
                    temp = regexprep(n(r_transition).labelString,'[0-9]+[.]*[0-9]*e[+][0-9]*','');
                    get_var = regexp(temp,'[a-zA-Z][a-zA-Z_0-9]*','match');
                end
                r_var = randi([1 length(var)],1,1); % random variable from variable list to replace the variable in the transition
                while(ismember(var(r_var),get_var)) % check to see if random variable chosen = variable to be replaced
                    r_var = randi([1 length(var)],1,1);
                end
                
                %                 disp('old transition')
                %                 n(r_transition).labelString
                %                 disp('mutant transition')
                
                new = strrep(n(r_transition).labelString,get_var,var(r_var));
                index = randi([1 length(new)],1,1);
                mutant = new(index);
                
                
            case 2
                %% change operation
                r_transition = randi([1 length(n)],1,1);
                temp = regexprep(n(r_transition).labelString,'[0-9]+[.]*[0-9]*e[+][0-9]*','');
                op = regexp(temp,'[&|+*/><-]','match');
                while(isempty(op))
                    r_transition = randi([1 length(n)],1,1);
                    temp = regexprep(n(r_transition).labelString,'[0-9]+[.]*[0-9]*e[+][0-9]*','');
                    op = regexp(temp,'[&|+*/><-]','match');
                end
                
                
                a_op = ['+' '*' '/' '-'];
                l_op = ['&' '|'];
                r_op = ['>' '<'];
                index = randi([1 length(op)],1,1);
%                 op(index);
                if(ismember(char(op(index)),a_op))
                    %                     disp('a')
                    random_op = randi([1 length(a_op)],1,1);
                    while(strcmp(op(index),a_op(random_op))~=0)
                        random_op = randi([1 length(a_op)],1,1);
                    end
                    mutant = strrep(n(r_transition).labelString,op(index),a_op(random_op));
                elseif (ismember(char(op(index)),l_op))
                    %                     disp('l')
                    random_op = randi([1 length(l_op)],1,1);
                    while(strcmp(op(index),l_op(random_op))~=0)
                        random_op = randi([1 length(l_op)],1,1);
                    end
                    mutant = strrep(n(r_transition).labelString,op(index),l_op(random_op));
                else
                    %                     disp('r')
                    random_op = randi([1 length(r_op)],1,1);
                    while(strcmp(op(index),r_op(random_op))~=0)
                        random_op = randi([1 length(r_op)],1,1);
                    end
                    mutant = strrep(n(r_transition).labelString,op(index),r_op(random_op));
                end
                
                %                 disp('old transition')
                %                 n(r_transition).labelString
                %                 disp('mutant transition')
                %                 mutant
                
            case 3
                %% negation
                r_transition = randi([1 length(n)],1,1);
                temp = regexprep(n(r_transition).labelString,'[0-9]+[.]*[0-9]*e[+][0-9]*','');
                get_var = regexp(temp,'[a-zA-Z][a-zA-Z_0-9]*','match');
                while(isempty(get_var))
                    r_transition = randi([1 length(n)],1,1);
                    temp = regexprep(n(r_transition).labelString,'[0-9]+[.]*[0-9]*e[+][0-9]*','');
                    get_var = regexp(temp,'[a-zA-Z][a-zA-Z_0-9]*','match');
                end
                %                 disp('old transition')
                %                 n(r_transition).labelString
                %                 disp('mutant transition')
                new = strrep(n(r_transition).labelString,get_var,strcat('~',get_var));
                index = randi([1 length(new)],1,1);
                mutant = new(index);
        end
        
        mutant = strcat(mutant ,'% MUTANT old transition:',n(r_transition).labelString);
        m = {[num2str(r_transition) '#@#' strtrim(char(mutant))]};
        
        mutant_set = union(mutant_set,m);    % Pick unique set
        
    end
end


%% execution order
mutant_exec_order = 0;   % set to 1 if you want execution order to be changed

if(mutant_exec_order == 1)
    iloop = length(mutant_set) + 1;
    ind_ex = find(EX > 1);
    if ~isempty(ind_ex)
        for imut = 1:length(ind_ex)
            open('autopilot_stateflow_sldv_P05_org') 
            n=findDeep(s,'Transition');
            org_str = n(ind_ex(imut)).labelString;
            k = n(ind_ex(imut)).executionOrder - 1;
            for j = 1:k
                open('autopilot_stateflow_sldv_P05_org')    % specify stateflow model
                s =sfroot;
                n=findDeep(s,'Transition');
                mutant = {[org_str '% MUTANT change EXEC ORDER from ' num2str(EX(ind_ex(imut))) ' to ' num2str(j)]};
                n(ind_ex(imut)).labelString = char(mutant) ;
                n(ind_ex(imut)).executionOrder = j;
                save_system('autopilot_stateflow_sldv_P05_org',['mutant' num2str(iloop)]);
                fprintf(fid,'Model: %s, Mutant: %s\n',strcat('mutant',num2str(iloop),'.slx'),string(mutant));
                iloop = iloop + 1;
                bdclose all
            end
            
        end
    end
end

for i = 1:length(mutant_set)
    open('autopilot_stateflow_sldv_P05_org')    % specify stateflow model
    s =sfroot;
    n=findDeep(s,'Transition');
    string_split = strsplit(char(mutant_set(i)),'#@#');
    num_t = str2double(string_split(1));
    n(num_t).labelString = char(string_split(2));
    save_system('autopilot_stateflow_sldv_P05_org',['mutant' num2str(i)]);
    fprintf(fid,'Model: %s, Mutant: %s\n',strcat('mutant',num2str(i),'.slx'),string(n(num_t).labelString));
    close_system(['mutant' num2str(i)]);
end


fclose('all');
bdclose all
clear all


